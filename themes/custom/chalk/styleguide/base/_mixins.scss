//
// Mixins
//
// Snippets of reusable CSS to develop faster and keep code readable
//
// Styleguide 10.0

// UTILITY MIXINS
// --------------------------------------------------

// Reset filters for IE
//
// @include gradient-reset-filter();
//
// Styleguide 10.1

@mixin gradient-reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
}

// IE rgba
//
// @include rgba-ie($color, $alpha);
//
// Styleguide 10.2

@mixin rgba-ie($color, $alpha) {
  background-color: $color;
  background-color: rgba($color, $alpha);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($color)}', endColorstr='#{ie-hex-str($color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
//
// Dividers (basically an hr) within dropdowns and nav lists
//
// @include nav-divider($top: #e5e5e5, $bottom: $white);
//
// Styleguide 10.3

@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
// IE7 needs a set width since we gave a height. Restricting just
// to IE7 to keep the 1px left/right space in other browsers.
// It is unclear where IE is getting the extra space that we need
// to negative-margin away, but so it goes.
  *width: 100%;
  height: 1px;
  margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
  *margin: -5px 0 5px;
  overflow: hidden;
  background-color: $top;
  border-bottom: 1px solid $bottom;
}

// Navbar vertical align
//
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
//
// @include navbarVerticalAlign($elementHeight);
//
// Styleguide 10.4

@mixin navbarVerticalAlign($elementHeight) {
  margin-top: ($navbarHeight - $elementHeight) / 2;
}

// Navbar vertical align
//
// https://gist.github.com/3166895
// http://compass-style.org/reference/compass/helpers/sprites/
//
// @include get-sprite($map, $sprite, $bg-color: transparent, $repeat: no-repeat, $height: true, $width: true);
//
// Styleguide 10.5

@mixin get-sprite($map, $sprite, $bg-color: transparent, $repeat: no-repeat, $height: true, $width: true) {

//http://compass-style.org/reference/compass/helpers/sprites/#sprite-file
  $sprite-image: sprite-file($map, $sprite);

// http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
  $sprite-map: sprite-url($map);

// http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
  $sprite-position: sprite-position($map, $sprite);

// Returns background
  background: $bg-color $sprite-map $sprite-position $repeat;

// http://compass-style.org/reference/compass/helpers/image-dimensions/
// Checks to see if the user wants height returned
  @if $height == true {
  // Gets the height of the sprite-image
    $sprite-height: image-height($sprite-image);
  // Returns the height
    height: $sprite-height; }

// http://compass-style.org/reference/compass/helpers/image-dimensions/
// Checks to see if the user wants height returned
  @if $width == true {
  // Gets the width of the sprite-image
    $sprite-width: image-width($sprite-image);
  // Returns the width
    width: $sprite-width; }
}

// A11Y-wise hiding
//
// @include cf();
//
// Styleguide 10.6

@mixin cf {
  zoom: 1;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// CUSTOM COMPONENT MIXINS
// --------------------------------------------------

//
// Triangle
//
// Create a triangle.
//
// @include triangle($color, $orientation, $width, $height);
//
// $color = green - Background color.
// $orientation = top - Orientation.
// $width = 10px - X size.
// $height = 5px - Y size.
//
// Styleguide 10.7

@mixin triangle($color: green, $orientation: top, $width: 10px, $height: 5px) {
  border-style: solid;
  height: 0;
  width: 0;

  @if $orientation == 'left' {
  border-color: transparent $color transparent transparent;
  border-width: $height/2 $width $height/2 0;
  }
  @else if $orientation == 'right' {
  border-color: transparent transparent transparent $color;
  border-width: $height/2 0 $height/2 $width;
  }
  @else if $orientation == 'top' {
  border-color: transparent transparent $color transparent;
  border-width: 0 $height/2 $width $height/2;
  }
  @else {
  border-color: $color transparent transparent transparent;
  border-width: $height $width/2 0 $width/2;
  }
}

//
// Animation
//
// Create an animation with vendor prefixes
//
// @include animation($value);
//
// $value - name and time values
//
// Styleguide 10.8

@mixin animation($value) {
  -webkit-animation: $value;
  -moz-animation: $value;
  -ms-animation: $value;
  -o-animation: $value;
  animation: $value;
}

//
// Buttons helper
//
// Define simple button styles
//
// @include button();
//
// Styleguide 10.9

@mixin button($font-size: $font-size-md) {
  @include appearance(none);
  border-radius: 3px;
  cursor: pointer;
  display: inline-block;
  font-size: $font-size;
  font-weight: 600;
  line-height: 1;
  padding: rem(7px) $gutter/2 rem(8px);
  text-align: center;
  text-decoration: none;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;
  -webkit-font-smoothing: antialiased;

  &:active {
    transform: translateY(1px);
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
}

//
// Text overflow
//
// Requires inline-block or block for proper styling
//
// @include text-overflow;
//
// Styleguide 10.10

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//
// Image replacement
//
// Kellum Method: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
// Additional helpers from http://html5boilerplate.com/docs/css/
// This is also included as a SASS mixin, see: sass/custom.rb
// see also http://css-tricks.com/examples/ImageReplacement/
//
// @include ir;
//
// Styleguide 10.11

@mixin ir {
  // Kellum Method
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
  // Additional helpers
  // border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  background-color: transparent; // Hide the default background color on elements like <button>
}

//
// Pseudo element
//
// Create an empty css pseudo element. Reusable for, e.g., icons
//
// @include el($width: 100%, $height: 100%, $display: block);
//
// Styleguide 10.12

@mixin el($width: 100%, $height: 20px, $display: block) {
  content: '';
  display: block;
  height: $height;
  width: $width;
}

//
// Stripes background
//
// @include stripes($color1: red, $color2: blue, $angle: -45deg);
//
// Styleguide 10.13

@mixin stripes($color1: red, $color2: blue, $angle: -45deg) {
  background: repeating-linear-gradient(
    $angle,
    $color1,
    $color1 10px,
    $color2 10px,
    $color2 20px
  );
}
