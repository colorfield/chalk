//
//  Functions
//

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
// Use bourbon http://bourbon.io/docs/#px-to-em
// @function em($pxWidth) {
//   @return $pxWidth / $base-font-size * 1em;
// }

// // Creating rems and pixels
// Use bourbon http://bourbon.io/docs/#px-to-rem
// @function rem($pxWidth) {
//   @return $pxWidth / $base-font-size * 1rem;
// }

// Vertical Rhythm
// Helps for creating a baseline grid and use consistent bottom/top margin accross the whole project
// Doc: https://alwaystwisted.com/articles/2013-12-30-not-your-average-vertical-rhythm-sass-mixin
//  eg:    margin-bottom: rhythm(2, 14px, px);
@function rhythm($lines: 1, $font-size: $base-font-size, $line-height: $base-line-height) {
  // $unit1: strip-units($font-size);
  // @if $unit == em {
  //   $rhythm: em($lines * strip-units($font-size) * $line-height-ratio);
  // } @else if $unit == rem{
  //   $rhythm: $lines * $font-size * $line-height-ratio;
  // } @else if $unit == px{
  //   $rhythm: $lines * $font-size * $line-height-ratio +px;
  // } @else {
    $rhythm: $lines * $font-size * $line-height;
  // }
  @return $rhythm;
}

// Inline SVG background image with a PNG fallback.
// Fallback based on: http://pauginer.tumblr.com/post/36614680636/invisible-gradient-technique

@mixin svg-background($image-name) {
  background-image: image-url("../../images/bg/" + $image-name + ".png", false, false);
  background-image: -webkit-linear-gradient(transparent, transparent), inline-image("bg/" + $image-name + ".svg");
  background-image: linear-gradient(transparent, transparent), inline-image("bg/" + $image-name + ".svg");
}

// After applying mixin, inline elements will need the display property set to
// block or inline-block.
@mixin image-replace($width, $height) {
  height: $height;
  overflow: hidden;
  width: $width;

  &:before {
    content: "";
    display: block;
    height: 150%;
    width: 0;
  }
}

// Calculate columns width based on bourbon values
@function columns($amount) {
  $gutters: $amount - 1;
  $value: rem($column * $amount + $gutter * $gutters);
  @return $value;
}
